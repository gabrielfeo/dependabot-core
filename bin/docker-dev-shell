#!/bin/bash

set -e

IMAGE_NAME="${IMAGE_NAME:=dependabot/dependabot-core-development}"
CONTAINER_NAME="${CONTAINER_NAME:=dependabot-core-development}"
DOCKERFILE="Dockerfile.development"
HELP=false
REBUILD=false

# Enable docker buildkit with inline cache builds
export DOCKER_BUILDKIT=1

# shellcheck disable=SC2034
OPTS=$(getopt -o hr --long help,rebuild -n 'parse-options' -- "$@")
# shellcheck disable=SC2181
if [ $? != 0 ]; then
  echo "failed parsing options" >&2
  exit 1
fi

while true; do
  case "$1" in
    -h | --help ) HELP=true; shift ;;
    -r | --rebuild ) REBUILD=true; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

if [ "$HELP" = "true" ]; then
  echo "usage: $0 [--rebuild] [ARGS]"
  exit 0
fi

build_image() {
  export BUILT_IMAGE=true
  echo "$(tput setaf 2)=> building image from Dockerfile$(tput sgr0)"

  local TARGETARCH;
  case "$(uname -m)"
  in
    amd64 | x86_64) TARGETARCH=amd64 ;;
    arm64 | aarch64) TARGETARCH=arm64 ;;
    *) TARGETARCH=amd64 ;;
  esac

  docker build \
    --build-arg BUILDKIT_INLINE_CACHE=1 \
    --build-arg "TARGETARCH=${TARGETARCH}" \
    --build-arg "USER_UID=$(id -u)" \
    --build-arg "USER_GID=$(id -g)" \
    --cache-from "dependabot/dependabot-core:latest" \
    -t dependabot/dependabot-core .
  echo "$(tput setaf 2)=> building image from $DOCKERFILE$(tput sgr0)"
  docker build --build-arg BUILDKIT_INLINE_CACHE=1 -t "$IMAGE_NAME" -f "$DOCKERFILE" .
}

IMAGE_ID=$(docker inspect --type=image -f '{{.Id}}' "$IMAGE_NAME" 2> /dev/null || true)
if [ -z "$IMAGE_ID" ]; then
  echo "$(tput setaf 4) > image $IMAGE_NAME doesn't exist$(tput sgr0)"
  build_image
elif [ "$REBUILD" = "true" ]; then
  echo "$(tput setaf 4) > rebuild of $IMAGE_NAME requested$(tput sgr0)"
  build_image
else
  echo "$(tput setaf 4) > image $IMAGE_NAME already exists$(tput sgr0)"
fi

set +e
RUNNING=$(docker ps --format '{{.Names}}' | grep "$CONTAINER_NAME$")
set -e
echo "$RUNNING"
if [ -n "$RUNNING" ]; then
  if [ -z "$BUILT_IMAGE" ]; then
    # image was not rebuilt - can we reuse existing?
    exec docker exec -ti "$CONTAINER_NAME" bash
  else
    # image was rebuilt - exit running container
    docker stop "$CONTAINER_NAME"
  fi
fi

DOCKER_OPTS=()
if [ -n "$DEPENDABOT_PROXY" ]; then
  DOCKER_OPTS+=(-e "http_proxy=$DEPENDABOT_PROXY")
  DOCKER_OPTS+=(-e "HTTP_PROXY=$DEPENDABOT_PROXY")
  DOCKER_OPTS+=(-e "https_proxy=$DEPENDABOT_PROXY")
  DOCKER_OPTS+=(-e "HTTPS_PROXY=$DEPENDABOT_PROXY")
fi

if [ -n "$DOCKER_NETWORK" ]; then
  DOCKER_OPTS+=(--network "$DOCKER_NETWORK")
fi

CONTAINER_ARGS=("bash")
if [ "$#" -gt "0" ]; then
  CONTAINER_ARGS=("$@")
fi

echo "$(tput setaf 2)=> running docker development shell$(tput sgr0)"
CODE_DIR="/home/dependabot/dependabot-core"
touch .core-bash_history
docker run --rm -ti \
  -v "$(pwd)/.core-bash_history:/home/dependabot/.bash_history" \
  -v "$(pwd):$CODE_DIR" \
  --name "$CONTAINER_NAME" \
  --env "LOCAL_GITHUB_ACCESS_TOKEN=$LOCAL_GITHUB_ACCESS_TOKEN" \
  "${DOCKER_OPTS[@]}" \
  --cap-add=SYS_PTRACE \
  "$IMAGE_NAME" "${CONTAINER_ARGS[@]}"
